,language,source
35,SQL,"INSERT INTO CUSTOMER (customerid,customername) VALUES(,'alpha') ; INSERT INTO CUSTOMER (customerid,customername) VALUES(,'beta'); DROP CUSTOMER; SAVEPOINT s; INSERT INTO CUSTOMER (customerid,customername) VALUES(,'gamma'); SAVEPOINT s; INSERT INTO CUSTOMER (customerid,customername) VALUES(,'tera'); SAVEPOINT s; INSERT INTO CUSTOMER (customerid,customername) VALUES(,'omega'); ROLLBACK TO s; SELECT customername FROM CUSTOMER;"
158,SQL,"CREATE TABLE CosineTable ( Angle INT NOT NULL, CosValue FLOAT NOT NULL PRIMARY KEY (Angle), UNIQUE (CosValue) );"
197,SQL,"CREATE TABLE CosineTable ( Angle SMALLINT NOT NULL, CosValue FLOAT NOT NULL, PRIMARY KEY (Angle), UNIQUE (CosValue) );"
219,SQL,"CREATE TABLE CosineTable ( Angle INT NOT NULL, CosValue INT NOT NULL, PRIMARY KEY (Angle), UNIQUE (CosValue) ); INSERT INTO CosineTable (Angle, CosValue) VALUES (,), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,); SELECT ((SELECT CosValue FROM CosineTable WHERE Angle = ) + ((SELECT CosValue FROM CosineTable WHERE Angle = ) - (SELECT CosValue FROM CosineTable WHERE Angle = )) * (-)/(-)) FROM CosineTable;"
226,SQL,"CREATE TABLE CosineTable ( Angle SMALLINT NOT NULL, CosValue INT NOT NULL, PRIMARY KEY (Angle), UNIQUE (CosValue) ); INSERT INTO CosineTable (Angle, CosValue) VALUES (,), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,); SELECT * FROM CosineTable;-- your code goes here;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
228,SQL,"CREATE TABLE company ( company_id INT NOT NULL PRIMARY KEY, company_name varchar(), account_id INT NOT NULL, account_name varchar() );"
306,SQL,"CREATE TABLE songs (name, date, length); -- your code goes here;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
360,SQL,"CREATE TABLE CosineTable( Angle INTEGER PRIMARY KEY, CosValue DECIMAL(,) NOT NULL ); Insert into CosineTable values (,),(,.),(,.),(,.),(,.),(,.),(,.), (,.),(,.),(,.),(,.),(,.),(,.),(,.),(,.),(,.), (,.),(,.),(,); Select -- /*CosValue + ((Select CosValue from cosineTable tbl where tbl.Angle = r.Angle +)- CosValue) */-- * -- /*(( - r.Angle)/.) */ -- from cosineTable r where (r.Angle < ) and (r.Angle + > )  and   r.Angle = r.Angle;"
372,SQL,"CREATE TABLE CosineTable ( Angle INT NOT NULL, CosValue INT NOT NULL, PRIMARY KEY (Angle), UNIQUE (CosValue) ); INSERT INTO CosineTable (Angle, CosValue) VALUES (,), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,); SELECT DISTINCT(SELECT CosValue FROM CosineTable WHERE Angle > - AND Angle < ) + ((SELECT CosValue FROM CosineTable WHERE Angle < + AND Angle > ) - (SELECT CosValue FROM CosineTable WHERE Angle > - AND Angle < )) * ( - (SELECT Angle FROM CosineTable WHERE Angle > - AND Angle < )) / ((SELECT Angle FROM CosineTable WHERE Angle < + AND Angle > ) - (SELECT Angle FROM CosineTable WHERE Angle > - AND Angle < )) FROM CosineTable;"
822,SQL,"CREATE TABLE CosineTable ( Angle INT NOT NULL, CosValue INT NOT NULL, PRIMARY KEY (Angle), UNIQUE (CosValue) ); INSERT INTO CosineTable (Angle, CosValue) VALUES (,), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,); SELECT MAX(CosValue) + (MIN(CosValue)-MAX(CosValue)) * (-MIN(Angle)) / (MAX(Angle)-MIN(Angle)) FROM CosineTable WHERE Angle > - AND Angle < + ;"
885,SQL,"CREATE TABLE CosineTable ( Angle INT NOT NULL, CosValue INT NOT NULL, PRIMARY KEY (Angle), UNIQUE (CosValue) ); INSERT INTO CosineTable (Angle, CosValue) VALUES (,), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,); SELECT MAX(CosValue) + (MIN(CosValue) - MAX(CosValue)) * ( - MIN(Angle)) / (MAX(Angle) - MIN(Angle)) FROM CosineTable WHERE Angle > - AND Angle < + ;"
887,SQL,"create table emp (id number,name varchar(),dept varchar()); insert into emp values(,'anu',); insert into emp values(,'vinu',); insert into emp values(,'RASa',); insert into emp values(,'AAdil',); insert into emp values(,'aadersh',); insert into emp values(,'Aanand',); select* from emp where id between and ;"
1018,SQL,"CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); insert into Salaries (CheckNum, Amount) values (, ), (, ), (, .), (, ), (, .), (, ), (, ), (, .), (, ); select Amount, count(Amount) as AmountCount from Salaries join Salaries SalariesMax on Salaries.CheckNum = SalariesMax.CheckNum group by Salaries.Amount having Salaries.AmountCount = max(SalariesMax.AmountCount) order by Salaries.AmountCount desc;"
1022,SQL,"create table events ( id int(), user_id int(), name varchar(), yyyy int(), mm int(), aspect varchar() ); create table responses ( response_id int(), event_id int(), response_string varchar() ); insert into events values (, , 'registration', , , 'invite_friends'), (, , 'registration', , , 'invite_friends'), (, , 'survey_question', , , 'motivation'), (, , 'survey_question', , , 'motivation'), (, , 'survey_question', , , 'motivation'), (, , 'survey_question', , , 'motivation'); insert into responses values (, , 'yes'), (, , 'no'), (, , 'high_fives'), (, , 'tough_love'), (, , 'evening'), (, , 'morning'); -- select count(*) from events; -- select count(*) from responses; -- example query: -- select count(*) -- from events -- where name = 'survey_question' -- and aspect = 'motivation'; -- . Write a query that would show how many different survey questions we've asked select count(distinct(aspect)) from events where name = 'survey_question';"
1165,SQL,"CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); INSERT INTO Salaries (CheckNum, Amount) VALUES (,), (,), (,), (,), (,), (,), (,), (,), (,);"
1170,SQL,"CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); INSERT INTO Salaries (CheckNum, Amount) VALUES (,), (,), (,), (,), (,), (,), (,), (,), (,); SELECT * FROM (SELECT Amount, Count(Amount) AS TotalAmount FROM Salaries GROUP BY Amount) HAVING TotalAmount = SELECT MAX(TotalAmount) FROM (SELECT Amount, Count(Amount) AS TotalAmount FROM Salaries GROUP BY Amount);"
1256,SQL,"select ' or `ab`=`a`+'b'"
1368,SQL,"CREATE TABLE CosineTable ( Angle INT NOT NULL, CosValue INT NOT NULL, PRIMARY KEY (Angle), UNIQUE (CosValue) ); INSERT INTO CosineTable (Angle, CosValue) VALUES (,), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,); SELECT * FROM CosineTable; SELECT MAX(CosValue) + (MIN(CosValue) - MAX(CosValue)) * ( - MIN(Angle)) / (MAX(Angle) - MIN(Angle)) FROM CosineTable WHERE Angle > - AND Angle < + ;"
1387,SQL,"Select (Select ) As MySubQueryValue;"
1476,SQL,"CREATE TABLE CosineTable ( Angle INT NOT NULL, CosValue DECIMAL(,) NOT NULL, PRIMARY KEY (Angle), UNIQUE (CosValue) ); INSERT INTO CosineTable (Angle, CosValue) VALUES (,), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,); SELECT * FROM CosineTable; SELECT MAX(CosValue) + (MIN(CosValue) - MAX(CosValue)) * ( - MIN(Angle)) / (MAX(Angle) - MIN(Angle)) FROM CosineTable WHERE Angle > - AND Angle < + ;"
1491,SQL,"CREATE TABLE CosineTable ( Angle INTEGER NOT NULL, CosValue DOUBLE NOT NULL, PRIMARY KEY (Angle), UNIQUE (CosValue) ); INSERT INTO CosineTable (Angle, CosValue) VALUES (,), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,); SELECT * FROM CosineTable; SELECT MAX(CosValue) + (MIN(CosValue) - MAX(CosValue)) * ( - MIN(Angle)) / (MAX(Angle) - MIN(Angle)) FROM CosineTable WHERE Angle > - AND Angle < + ;"
1497,SQL,"CREATE TABLE CosineTable ( Angle INTEGER NOT NULL, CosValue INTEGER NOT NULL, PRIMARY KEY (Angle), UNIQUE (CosValue) ); INSERT INTO CosineTable (Angle, CosValue) VALUES (,), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,); SELECT * FROM CosineTable; SELECT MAX(CosValue) + (MIN(CosValue) - MAX(CosValue)) * ( - MIN(Angle)) / (MAX(Angle) - MIN(Angle)) FROM CosineTable WHERE Angle > - AND Angle < + ;"
1499,SQL,"SELECT Amount, COUNT('Amount') FROM Salaries;"
1521,SQL,"CREATE TABLE CosineTable ( Angle INTEGER NOT NULL, CosValue DECIMAL(,) NOT NULL, PRIMARY KEY (Angle), UNIQUE (CosValue) ); INSERT INTO CosineTable (Angle, CosValue) VALUES (,), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,); SELECT * FROM CosineTable; SELECT MAX(CosValue) + (MIN(CosValue) - MAX(CosValue)) * ( - MIN(Angle)) / (MAX(Angle) - MIN(Angle)) FROM CosineTable WHERE Angle > - AND Angle < + ;"
1670,SQL,"CREATE TABLE numbers ( id INTEGER PRIMARY KEY, name TEXT, number INTEGER ); INSERT INTO numbers (id, name, number) VALUES (, 'Math Class Girl', --), (, 'Starbucks Girl', --), (, 'Redhead Girl', --), (, 'Steve', --), (, 'Froyo Girl', --);"
1677,SQL,"CREATE TABLE numbers ( id INTEGER PRIMARY KEY, name TEXT, number INTEGER ); INSERT INTO numbers (id, name, number) VALUES (, 'Math Class Girl', --), (, 'Starbucks Girl', --), (, 'Redhead Girl', --), (, 'Steve', --), (, 'Froyo Girl', --); SELECT * FROM numbers;"
1789,SQL,"create table emp (id number,name varchar(),dept varchar()); insert into emp values(,'anu',); insert into emp values(,'vinu',); insert into emp values(,'RASa',); insert into emp values(,'AAdil',); insert into emp values(,'aadersh',); insert into emp values(,'Aanand',); select name from emp where name like %aa% ;"
1794,SQL,"create table emp (id number,name varchar(),dept varchar()); insert into emp values(,'anu',); insert into emp values(,'vinu',); insert into emp values(,'RASa',); insert into emp values(,'AAdil',); insert into emp values(,'aadersh',); insert into emp values(,'Aanand',); select name from emp where name like '%aa%' ;"
1809,SQL,"CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); INSERT INTO Salaries (CheckNum, Amount) VALUES (, ), (, ), (, ). (, ), (, ), (, .), (, ); SELECT Amount, COUNT(DISTINCT CHECK_NUM) FROM Salaries GROUP BY Amount Having COUNT(DISTINCT CHECK_NUM) = (SELECT MAX(COUNT(DISTINCT CHECK_NUM) FROM SALARIES);"
1854,SQL,"create table CosineTable( Angle int, CosValue float ); Insert into CosineTable (Angle, CosValue) Values (,), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,); Select as x, CosValue as a From CosineTable where Angle like 'x%'; Select * From (Values ('')) as x; Select CosValue as a From CosineTable Where Angle like '%' and Angle < ; Select CosValue as b From CosineTable Where Angle like '%' and Angle > ;"
1861,SQL,"CREATE TABLE numbers ( id INTEGER PRIMARY KEY, name VARCHAR(), number VARCHAR() ); INSERT INTO numbers (id, name, number) VALUES (, 'Math Class Girl', '--'), (, 'Starbucks Girl', '--'), (, 'Redhead Girl', '--'), (, 'Steve', '--'), (, 'Froyo Girl', '--');"
1903,SQL,"-- your code goes here CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); INSERT INTO Salaries (CheckNum, Amount) VALUES (, ), (, ), (, ). (, ), (, ), (, .), (, ); SELECT Amount, COUNT(DISTINCT CHECK_NUM) FROM Salaries GROUP BY Amount Having COUNT(DISTINCT CHECK_NUM) = (SELECT MAX(COUNT(DISTINCT CHECK_NUM) FROM SALARIES);"
1904,SQL,"-- your code goes here CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); INSERT INTO Salaries (CheckNum, Amount) VALUES (, ), (, ), (, ), (, ), (, ), (, .), (, ); SELECT Amount, COUNT(DISTINCT CHECK_NUM) FROM Salaries GROUP BY Amount HAVING COUNT(DISTINCT CHECK_NUM) = (SELECT MAX(COUNT(DISTINCT CHECK_NUM)) FROM SALARIES);"
1913,SQL,"-- your code goes here -- your code goes here CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); INSERT INTO Salaries (CheckNum, Amount) VALUES (, ), (, ), (, ), (, ), (, ), (, .), (, ); SELECT Amount, COUNT(CheckNum) FROM Salaries GROUP BY Amount HAVING COUNT(CheckNum) = (SELECT MAX(COUNT(CheckNum)) FROM SALARIES);"
1930,SQL,"-- your code goes here -- your code goes here -- your code goes here CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); INSERT INTO Salaries (CheckNum, Amount) VALUES (, ), (, ), (, ), (, ), (, ), (, .), (, ); SELECT * From Salaries;"
1986,SQL,"-- your code goes here -- your code goes here -- your code goes here CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); INSERT INTO Salaries (CheckNum, Amount) VALUES (, ), (, ), (, ), (, ), (, ), (, .), (, ); SELECT Amount, COUNT(*) as CountMax FROM Salaries GROUP BY Amount WHERE (CountMax = (SELECT MAX(CountMax)));"
2035,SQL,"CREATE TABLE CosineTable ( Angle INTEGER NOT NULL, CosValue DECIMAL() NOT NULL, PRIMARY KEY (Angle), UNIQUE (CosValue) ); INSERT INTO CosineTable (Angle, CosValue) VALUES (,), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,); SELECT MAX(CosValue) + (MIN(CosValue) - MAX(CosValue)) * ( - MIN(Angle)) / (MAX(Angle) - MIN(Angle)) FROM CosineTable WHERE Angle > - AND Angle < + ;"
2051,SQL,"create table tbl(str varchar()); insert into tbl values('Hello world!'); select * from tbl;"
2058,SQL,"CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); insert into Salaries values (, ), (, ), (, ) ; select count(Amount) from Salaries group by Amount order by count(Amount) desc;"
2059,SQL,"-- your code goes here CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); INSERT INTO Salaries (CheckNum, Amount) VALUES (, ), (, ), (, ), (, ), (, ), (, .), (, ); SELECT * FROM (SELECT Amount, COUNT(*) as CntMax FROM Salaries) as CountTable WHERE CountTable.CntMax = Select Max(CountTable.CntMax);"
2060,SQL,"CREATE SEQUENCE customers seq START WITH SELECT customeers seq.currval from dual;"
2063,SQL,"CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); insert into Salaries values (, ), (, ), (, ) ; select count(Amount) from Salaries group by Amount;"
2065,SQL,"-- your code goes here -- your code goes here -- your code goes here CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); INSERT INTO Salaries (CheckNum, Amount) VALUES (, ), (, ), (, ), (, ), (, ), (, .), (, ); SELECT Amount, COUNT(*) as CountMax FROM Salaries GROUP BY Amount Having (CountMax = (SELECT MAX(CountMax)));-- your code goes here;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
2067,SQL,"CREATE TABLE CosineTable ( Angle INTEGER NOT NULL, CosValue DECIMAL(,) NOT NULL, PRIMARY KEY (Angle), UNIQUE (CosValue) ); INSERT INTO CosineTable (Angle, CosValue) VALUES (,), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,); SELECT MAX(CosValue) + (MIN(CosValue) - MAX(CosValue)) * ( - MIN(Angle)) / (MAX(Angle) - MIN(Angle)) FROM CosineTable WHERE Angle > - AND Angle < +;"
2069,SQL,"CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); insert into Salaries values (, ), (, ), (, ) ; select Amount, count(Amount) from Salaries where count(Amount) = ( select count(Amount) from Salaries group by Amount order by count(Amount) desc limit );"
2077,SQL,"CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); insert into Salaries values (, ), (, ), (, ) ; select Amount, count(Amount) from Salaries where count(Amount) = ( select count(Amount) from Salaries group by Amount order by count(Amount) desc limit ) group by Amount;"
2093,SQL,"-- your code goes here -- your code goes here CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); INSERT INTO Salaries (CheckNum, Amount) VALUES (, ), (, ), (, ), (, ), (, ), (, .), (, ); SELECT * FROM (SELECT Amount, COUNT(*) as CntMax FROM Salaries) as CountTable WHERE CountTable.CntMax = Select Max(CountTable.CntMax);"
2094,SQL,"CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); insert into Salaries values (, ), (, ), (, ) ; select Amount, count(Amount) as A from Salaries where count(Amount) = ( select count(Amount) from Salaries group by Amount order by count(Amount) desc limit ) group by A;"
2095,SQL,"CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); insert into Salaries values (, ), (, ), (, ) ; select Amount, count(Amount) as A from Salaries where count(Amount) = ( select count(Amount) from Salaries group by Amount order by count(Amount) desc limit ) group by count(Amount);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
2108,SQL,"CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ) ;    DROP Salaries; insert into Salaries values (, ), (, ), (, ) ; select Amount, count(Amount) as A from Salaries where count(Amount) = ( select count(Amount) from Salaries group by Amount order by count(Amount) desc limit ) group by (*);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
2113,SQL,"CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); INSERT INTO Salaries (CheckNum, Amount) VALUES (, ), (, ), (, ), (, ), (, ), (, .), (, ); SELECT * FROM (SELECT Amount, COUNT(*) as CntMax FROM Salaries) as CountTable WHERE CntMax = (Select Max(CntMax) FROM CountTable); -- your code goes here;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
2121,SQL,"CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); INSERT INTO Salaries (CheckNum, Amount) VALUES (, ), (, ), (, ), (, ), (, ), (, .), (, ); SELECT * FROM (SELECT Amount, COUNT(*) as CntMax FROM Salaries) as CountTable GROUP BY Amount Having CntMax = (SELECT Max(CntMax) FROM CountTable);"
2148,SQL,"CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); INSERT INTO Salaries (CheckNum, Amount) VALUES (, ), (, ), (, ), (, ), (, ), (, .), (, ); SELECT * FROM (SELECT Amount, COUNT(*) as CntMax FROM Salaries GROUP BY Amount) as CountTable WHERE CntMax = (SELECT Max(CntMax) FROM SELECT COUNT(*) AS CntMax From Salaries GROUP BY Amount);"
2162,SQL,"CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); insert into Salaries values (, ), (, ), (, ) ; select Amount, ( select count(Amount) from Salaries group by Amount order by count(Amount) desc) as cnt from Salaries;"
2164,SQL,"copy CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); insert into Salaries values (, ), (, ), (, ) ; select Amount, ( select count(Amount) from Salaries group by Amount order by count(Amount) desc) as cnt from Salaries;"
2169,SQL,"CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); insert into Salaries values (, ), (, ), (, ) ; select Amount, ( select count(Amount) from Salaries group by Amount) as cnt from Salaries;"
2175,SQL,"CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); insert into Salaries values (, ), (, ), (, ) ; select Amount, ( select count(Amount) from Salaries order by Amount) as cnt from Salaries;"
2178,SQL,"CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); INSERT INTO Salaries (CheckNum, Amount) VALUES (, ), (, ), (, ), (, ), (, ), (, .), (, ); SELECT * FROM (SELECT Amount, COUNT(*) as CntMax FROM Salaries GROUP BY Amount) as CountTable WHERE CntMax = (SELECT Max(CntMax) FROM SELECT COUNT(*) AS CntMax From Salaries GROUP BY Amount);"
2179,SQL,"CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); insert into Salaries values (, ), (, ), (, ) ; select Amount, ( select count(Amount) from Salaries group by Amount order by count(Amount) desc) as cnt from Salaries where cnt = ;"
2185,SQL,"CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); INSERT INTO Salaries (CheckNum, Amount) VALUES (, ), (, ), (, ), (, ), (, ), (, .), (, ); SELECT * FROM (SELECT Amount, COUNT(*) as CntMax FROM Salaries GROUP BY Amount) as CountTable WHERE CountTable.CntMax = (SELECT Max(CntMax) FROM SELECT COUNT(*) AS CntMax From Salaries GROUP BY Amount);"
2187,SQL,"CREATE TABLE ANGLE;-- your code goes here"
2198,SQL,"CREATE TABLE ANGLE(DEGREE,VALUE); INSERT INTO ANGLE VALUES (,.),(,.); DECLARE @VAR INT; SET @VAR = SELECT COUNT(*) FROM ANGLE; CREATE VIEW TEMP(VALUE); INSERT INTO TEMP VALUES (@VAR); SELECT /*!32302 1/0 */* FROM TEMP ;"
2208,SQL,"CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); INSERT INTO Salaries (CheckNum, Amount) VALUES (, ), (, ), (, ), (, ), (, ), (, .), (, ); SELECT FROM (SELECT Amount, COUNT(*) as CntMax FROM Salaries GROUP BY Amount) as CountTable WHERE CountTable.CntMax = (SELECT Max(CntMax) FROM SELECT COUNT(*) AS CntMax From Salaries GROUP BY Amount);"
2209,SQL,"CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); INSERT INTO Salaries (CheckNum, Amount) VALUES (, ), (, ), (, ), (, ), (, ), (, .), (, ); SELECT * FROM (SELECT Amount, COUNT(*) as CntMax FROM Salaries GROUP BY Amount) as CountTable WHERE CountTable.CntMax = (SELECT Max(CntMax) FROM SELECT COUNT(*) AS CntMax From Salaries GROUP BY Amount);"
2223,SQL,"CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); INSERT INTO Salaries (CheckNum, Amount) VALUES (, ), (, ), (, ), (, ), (, ), (, .), (, ); SELECT Amount, COUNT(*) as CntMax FROM Salaries GROUP BY Amount Having CntMax = (SELECT MAX(SELECT COUNT(*) FROM Salaries GROUP BY Amount));"
2270,SQL,"CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); INSERT INTO Salaries (CheckNum, Amount) VALUES (, ), (, ), (, ), (, ), (, ), (, .), (, ); SELECT Amount, COUNT(*) as CntMax FROM Salaries GROUP BY Amount Having COUNT(*) = (SELECT MAX(SELECT COUNT(*) FROM Salaries GROUP BY Amount));"
2272,SQL,"CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); INSERT INTO Salaries (CheckNum, Amount) VALUES (, ), (, ), (, ), (, ), (, ), (, .), (, ); SELECT Amount, COUNT(*) FROM Salaries GROUP BY Amount Having CntMax = (SELECT MAX(CntMax) FROM (SELECT COUNT(*) as CntMax FROM Salaries GROUP BY Amount));"
2295,SQL,"CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); insert into Salaries values (, ), (, ), (, ) ; select count(Amount), ( select Amount from Salaries group by count(Amount) having count(Amount) = ( select count(Amount) from Salaries group by Amount order by count(Amount) desc) from Salaries group by Amount ;"
2301,SQL,"CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); insert into Salaries values (, ), (, ), (, ) ; select count(Amount), ( select Amount from Salaries group by count(Amount) having count(Amount) = ( select count(Amount) from Salaries group by Amount order by count(Amount) desc)) from Salaries group by Amount ;"
2308,SQL,"CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); insert into Salaries values (, ), (, ), (, ) ; select count(Amount), ( select Amount from Salaries where count(Amount) = ( select count(Amount) from Salaries group by Amount order by count(Amount) desc)) from Salaries group by Amount ;"
2312,SQL,"CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); insert into Salaries values (, ), (, ), (, ) ; select count(Amount), ( select Amount from Salaries where count(Amount) = ( select count(Amount) from Salaries group by Amount order by count(Amount) desc)) from Salaries ;"
2341,SQL,"CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); INSERT INTO SALARIES VALUES(,),(,),(,),(,),(,),(,),(,); SELECT COUNT(*) FROM SALARIES GROUP BY AMOUNT ORDER BY C DESC;"
2352,SQL,"CREATE TABLE t (`id` int, `value` int, `type` int) ; INSERT INTO t (`id`, `value`, `type`) VALUES (, , ), (, , ), (, , ), (, , ), (, , ) ; -- visit ForgeRock.com for details on the Open Identity Stack -- sqlfiddle.com is built with OpenIDM select * from t;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
2446,SQL,"CREATE TABLE T(id INT, F VARCHAR()); INSERT INTO T VALUES(, ',,,,,'); INSERT INTO T VALUES(, ',,,'); INSERT INTO T VALUES(, ',,,,,,,'); WITH cte(id, num, tail, val) AS ( SELECT T.id, T.F, T.F, AS val FROM T UNION ALL SELECT t.id, CASE WHEN CHARINDEX(',', tail) <> THEN SUBSTRING(tail, , CHARINDEX(',', tail)) ELSE tail END, CASE WHEN CHARINDEX(',', tail) <> THEN SUBSTRING(tail, CHARINDEX(',', tail) + , LEN(tail) - LEN(SUBSTRING(tail, , CHARINDEX(',', tail)))) ELSE '' END, val + FROM T AS t --INNER JOIN cte ON t.id = cte.id WHERE LEN(tail) <> ) SELECT id, val, num FROM cte WHERE val <> ORDER BY id;"
2900,SQL,"CREATE TABLE recipes ( recipe_id INT NOT NULL, recipe_name VARCHAR() NOT NULL, PRIMARY KEY (recipe_id), UNIQUE (recipe_name) ); INSERT INTO recipes (recipe_id, recipe_name) VALUES (,Tacos), (,Tomato Soup), (,Grilled Cheese); SELECT recipe_id FROM recipes;"
3179,SQL,"CREATE TABLE groceries (id INTEGER PRIMARY KEY, name TEXT, quantity INTEGER); INSERT INTO groceries VALUES(, bananas, );"
3439,SQL,"create table tbl(str varchar()); insert into tbl values('Hello world!'); select * from tbl;"
3458,SQL,"CREATE TABLE ForgeRock (`id` int, `productName` varchar(), `description` varchar()) ; INSERT INTO ForgeRock (`id`, `productName`, `description`) VALUES (, 'OpenIDM', 'Platform for building enterprise provisioning solutions'), (, 'OpenAM', 'Full-featured access management'), (, 'OpenDJ', 'Robust LDAP server for Java') ; SELECT productName, description FROM ForgeRock;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
3463,SQL,"CREATE TABLE ForgeRock (`id` int, `productName` varchar(), `description` varchar()) ; INSERT INTO ForgeRock (`id`, `productName`, `description`) VALUES -- /* (, 'OpenIDM', 'Platform for building enterprise provisioning solutions'), (, 'OpenAM', 'Full-featured access management'), (, 'OpenDJ', 'Robust LDAP server for Java') ; SELECT productName, description, FROM ForgeRock;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
3506,Java7,/* package whatever; // don't place package name! */ import java.util.*; import java.lang.*; import java.io.*; import java.util.regex.Matcher; import java.util.regex.Pattern; /* Name of the class has to be Main only if the class is public. */ class Ideone { public static void main (String[] args) throws java.lang.Exception { String fullStack =  at org.hibernate.exception.SQLStateConverter.handledNonSpecificException(SQLStateConverter.java:)\n +  at org.hibernate.exception.SQLStateConverter.convert(SQLStateConverter.java:)\n +  at org.hibernate.exception.JDBCExceptionHelper.convert(JDBCExceptionHelper.java:)\n +  at org.hibernate.exception.JDBCExceptionHelper.convert(JDBCExceptionHelper.java:)\n +  at org.hibernate.jdbc.JDBCContext.afterNontransactionalQuery(JDBCContext.java:)\n +  at org.hibernate.impl.SessionImpl.afterOperation(SessionImpl.java:)\n +  at org.hibernate.impl.SessionImpl.list(SessionImpl.java:)\n +  at org.hibernate.impl.CriteriaImpl.list(CriteriaImpl.java:)\n +  at org.hibernate.impl.CriteriaImpl.uniqueResult(CriteriaImpl.java:)\n +  at ixl.auth.db.AuthTokenController.findAuthTokenByKey(AuthTokenController.java:)\n +  at ixl.auth.struts.AuthInterceptor.intercept(AuthInterceptor.java:)\n +  ... more\n + Caused by: java.sql.SQLException: Failed to check out database session -- ixl.conf.pool.ObjectPoolException: Requester is blacklisted: ip=... browser=.... uri=/actions/api/v/search/\n +  at ixl.sql.ManagedSqlConnection.getInternalConnection(ManagedSqlConnection.java:)\n +  at ixl.sql.ManagedSqlConnection.isClosed(ManagedSqlConnection.java:)\n +  at org.hibernate.jdbc.ConnectionManager.isAutoCommit(ConnectionManager.java:)\n +  at org.hibernate.jdbc.JDBCContext.afterNontransactionalQuery(JDBCContext.java:)\n +  ... more\n; System.out.println(Original string:\n + fullStack); final String ipPattern = =[[-]+\\.]+; final String ipReplace = =xxx; Pattern compiledIpPattern = Pattern.compile(ipPattern); for (String line : fullStack.split(\n)) { Matcher ipMatcher = compiledIpPattern.matcher(line); if (ipMatcher.find()) { line = ipMatcher.replaceAll(ipReplace); } System.out.println(line); } } };;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
3542,SQL,"create table tbl(str varchar()); insert into tbl values('Hello world!'); insert into tbl values('Hello world!'); insert into tbl values('Hello world!'); select * from tbl;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
3561,SQL,"create table tbl(id INT, str varchar()); insert into tbl values(,'Hello world!'); insert into tbl values(,'Hello world!'); insert into tbl values(,'Hello world!'); insert into tbl values(,'Hello world!'); select id, CASE id WHEN THEN ' Hello' WHEN THEN ' Hello' WHEN THEN ' Hello' WHEN THEN ' Hello' END FROM tbl;"
3746,SQL,"create table costable( Angle int, CosValue float ); insert into costable values(,), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,); create table tofind( Value int ); insert into tofind values(); Select A, ab from (SELECT CosValue as A,Angle as ab from costable where Angle = ((Select value from toFind)/)*); Select B, bc from (SELECT CosValue as B,Angle as bc from costable where Angle = ((Select value from toFind)/)*+); <!-- Select B, b from (SELECT CosValue as B,Angle as b from costable where Angle = ((Select value from toFind)/)*+); -->;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
3785,SQL,"create table T(id int, num int, val int); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); WITH rec(id, num, val) as ( select id,num, val from T where id = and num = UNION ALL select id, num-, val from rec join T on T.id- = rec.id ) select * from rec ;"
3796,SQL,"CREATE TABLE test (col decimal(,), col decimal(,), col decimal(,)) ; INSERT INTO test VALUES(.,.,.) ; SELECT ROUND(col,), FLOOR(col), ROUND(col,), CEIL(col), ROUND(col,-) col dec FROM test;"
4164,SQL,"CREATE TABLE T(ID INT NOT NULL, G INT NOT NULL, S VARCHAR() NULL, CONSTRAINT uT UNIQUE(ID)); /*Р—Р°РїРѕР»РЅРµРЅРёРµ С‚РµСЃС‚РѕРІС‹РјРё РґР°РЅРЅС‹РјРё*/ INSERT T(ID,G,S) VALUES(,,'РјС‹Р»Р°'); INSERT T(ID,G,S) VALUES(,,'СЂР°РјСѓ'); INSERT T(ID,G,S) VALUES(,,'РјР°РјР°'); INSERT T(ID,G,S) VALUES(,,'Сѓ'); INSERT T(ID,G,S) VALUES(,,'РљР»Р°СЂС‹'); INSERT T(ID,G,S) VALUES(,,'РљР°СЂР»'); INSERT T(ID,G,S) VALUES(,,'РєРѕСЂР°Р»Р»С‹'); INSERT T(ID,G,S) VALUES(,,'СѓРєСЂР°Р»'); /*РџРѕР»СѓС‡РµРЅРёРµ СЃС‚СЂРѕРє РјР°РјР° РјС‹Р»Р° СЂР°РјСѓ Рё РљР°СЂР» Сѓ РљР»Р°СЂС‹ СѓРєСЂР°Р» РєРѕСЂР°Р»Р»С‹*/ WITH Q(I,G,S) AS ( SELECT ID,G, CAST(S AS VARCHAR()) FROM (SELECT ROW_NUMBER() OVER(PARTITION BY G ORDER BY ID)[ID],G,S FROM T) T WHERE ID= UNION ALL SELECT Q.I+,Q.G, CAST(Q.S+' '+T.S AS VARCHAR()) FROM Q JOIN (SELECT ROW_NUMBER() OVER(PARTITION BY G ORDER BY ID)[ID],G,S FROM T) [T] ON Q.G=T.G AND Q.I=T.ID- ) SELECT G, S FROM Q WHERE I IN (SELECT MAX(QQ.I) FROM Q QQ WHERE QQ.G=Q.G) ORDER BY G,I OPTION (MAXRECURSION ); DROP TABLE T;"
4380,SQL,"create table T(id int, F varchar()); insert into T values(, ',,,,,'); insert into T values(, ',,,'); insert into T values(, ',,,,,,,'); WITH rec(id, num, val, str, pos) AS ( SELECT id, AS num, SUBSTR(F, , INSTR(F, ',') - ) AS val, SUBSTR(F, INSTR(F, ',') + ) AS str, INSTR(F, ',') AS pos FROM T UNION ALL SELECT id, num + , CASE WHEN INSTR(str, ',') != THEN SUBSTR(str, , INSTR(str, ',') - ) ELSE SUBSTR(str, ) END AS val, SUBSTR(str, INSTR(str, ',') + ) AS str, INSTR(str, ',') AS pos FROM rec WHERE pos != ) SELECT id, num, val FROM rec ORDER BY id;"
4611,SQL,"create table T(id int, num int, val int); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); with recursive rec(id,num, str) AS ( select id,num, val as str from T where id = UNION ALL select id, num+, str || T.val as str from rec inner join T on (T.id=rec.id) ) select id, str from rec order by id ;"
4621,SQL,"create table T(id int, num int, val int); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); with recursive rec(i,num, str) AS ( select id,num, val as str from T where id = UNION ALL select i, num+, str || T.val as str from rec inner join T on (T.id=rec.i) ) select i, str from rec order by i ;"
4628,SQL,"create table T(id int, num int, val int); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , )     ;    DROP T; insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); with recursive rec(i,n,str) AS ( select id,num, val as str from T where id = UNION ALL select i, n+, str || T.val as str from rec inner join T on (T.id=rec.i) ) select i, str from rec order by i ;"
4634,SQL,"create table T(id int, num int, val int); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); with recursive rec(i,n, str) AS ( select id,num, val as str from T where id = UNION ALL select i, n, str || T.val as str from rec inner join T on (T.id=rec.i) ) select i, str from rec where i < order by i ;"
4642,SQL,"create table T(id int, num int, val int); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); with recursive rec(i,n, str) AS ( select id,num, val as str from T where id = UNION ALL select i, n, str || T.val as str from rec inner join T on (T.id=rec.i) where i< ) select i, str from rec order by i ;"
4702,SQL,"Queue *Q = createQueue(); Enqueue(Q,); Enqueue(Q,); Enqueue(Q,); Enqueue(Q,); Enqueue(Q,); Dequeue(Q); Enqueue(Q,); printf(Front element is %d\n,front(Q));"
4707,SQL,"create table T(id int, num int, val int); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); with recursive rec(i,str) AS ( select id, num, val from T where id = UNION ALL select id, num, val from T T inner join rec r on r.i = T.id ) select * from rec order by i ;"
4767,SQL,"CREATE TABLE T_VEHICULE (VHC_ID INTEGER int, VHC_ID_FATHER int , VHC_NAME VARCHAR()) -- РќР°РїРѕР»РЅРёС‚СЊ РґР°РЅРЅС‹РјРё INSERT INTO T_VEHICULE VALUES (, NULL, 'ALL') INSERT INTO T_VEHICULE VALUES (, , 'SEA') INSERT INTO T_VEHICULE VALUES (, , 'EARTH') INSERT INTO T_VEHICULE VALUES (, , 'AIR') INSERT INTO T_VEHICULE VALUES (, , 'SUBMARINE') INSERT INTO T_VEHICULE VALUES (, , 'BOAT') INSERT INTO T_VEHICULE VALUES (, , 'CAR') INSERT INTO T_VEHICULE VALUES (, , 'TWO WHEELES') INSERT INTO T_VEHICULE VALUES (, , 'TRUCK') INSERT INTO T_VEHICULE VALUES (, , 'ROCKET') INSERT INTO T_VEHICULE VALUES (, , 'PLANE') INSERT INTO T_VEHICULE VALUES (, , 'MOTORCYCLE') INSERT INTO T_VEHICULE VALUES (, , 'BYCYCLE') WITH tree (data, id) AS (SELECT VHC_NAME, VHC_ID_FATHER FROM T_VEHICULE WHERE VHC_NAME = 'MOTORCYCLE' UNION ALL SELECT VHC_NAME, VHC_ID_FATHER FROM T_VEHICULE V INNER JOIN tree t ON t.id = V.VHC_ID) SELECT * FROM tree;"
4784,SQL,"CREATE TABLE T_VEHICULE (VHC_ID INTEGER int, VHC_ID_FATHER int , VHC_NAME VARCHAR()); -- РќР°РїРѕР»РЅРёС‚СЊ РґР°РЅРЅС‹РјРё INSERT INTO T_VEHICULE VALUES (, NULL, 'ALL') INSERT INTO T_VEHICULE VALUES (, , 'SEA') INSERT INTO T_VEHICULE VALUES (, , 'EARTH') INSERT INTO T_VEHICULE VALUES (, , 'AIR') INSERT INTO T_VEHICULE VALUES (, , 'SUBMARINE') INSERT INTO T_VEHICULE VALUES (, , 'BOAT') INSERT INTO T_VEHICULE VALUES (, , 'CAR') INSERT INTO T_VEHICULE VALUES (, , 'TWO WHEELES') INSERT INTO T_VEHICULE VALUES (, , 'TRUCK') INSERT INTO T_VEHICULE VALUES (, , 'ROCKET') INSERT INTO T_VEHICULE VALUES (, , 'PLANE') INSERT INTO T_VEHICULE VALUES (, , 'MOTORCYCLE') INSERT INTO T_VEHICULE VALUES (, , 'BYCYCLE') WITH tree (data, id) AS (SELECT VHC_NAME, VHC_ID_FATHER FROM T_VEHICULE WHERE VHC_NAME = 'MOTORCYCLE' UNION ALL SELECT VHC_NAME, VHC_ID_FATHER FROM T_VEHICULE V INNER JOIN tree t ON t.id = V.VHC_ID) SELECT * FROM tree;"
4797,SQL,"CREATE TABLE T_VEHICULE (VHC_ID INTEGER int, VHC_ID_FATHER int , VHC_NAME VARCHAR()); -- РќР°РїРѕР»РЅРёС‚СЊ РґР°РЅРЅС‹РјРё INSERT INTO T_VEHICULE VALUES (, , 'ALL') INSERT INTO T_VEHICULE VALUES (, , 'SEA') INSERT INTO T_VEHICULE VALUES (, , 'EARTH') INSERT INTO T_VEHICULE VALUES (, , 'AIR') INSERT INTO T_VEHICULE VALUES (, , 'SUBMARINE') INSERT INTO T_VEHICULE VALUES (, , 'BOAT') INSERT INTO T_VEHICULE VALUES (, , 'CAR') INSERT INTO T_VEHICULE VALUES (, , 'TWO WHEELES') INSERT INTO T_VEHICULE VALUES (, , 'TRUCK') INSERT INTO T_VEHICULE VALUES (, , 'ROCKET') INSERT INTO T_VEHICULE VALUES (, , 'PLANE') INSERT INTO T_VEHICULE VALUES (, , 'MOTORCYCLE') INSERT INTO T_VEHICULE VALUES (, , 'BYCYCLE') WITH tree (data, id) AS (SELECT VHC_NAME, VHC_ID_FATHER FROM T_VEHICULE WHERE VHC_NAME = 'MOTORCYCLE' UNION ALL SELECT VHC_NAME, VHC_ID_FATHER FROM T_VEHICULE V INNER JOIN tree t ON t.id = V.VHC_ID) SELECT * FROM tree;"
4807,SQL,"CREATE TABLE T_VEHICULE (VHC_ID INTEGER int, VHC_ID_FATHER int , VHC_NAME VARCHAR()); -- РќР°РїРѕР»РЅРёС‚СЊ РґР°РЅРЅС‹РјРё INSERT INTO T_VEHICULE VALUES (, null, 'ALL'); INSERT INTO T_VEHICULE VALUES (, , 'SEA') ; INSERT INTO T_VEHICULE VALUES (, , 'EARTH'); INSERT INTO T_VEHICULE VALUES (, , 'AIR') ; INSERT INTO T_VEHICULE VALUES (, , 'SUBMARINE'); INSERT INTO T_VEHICULE VALUES (, , 'BOAT') ; INSERT INTO T_VEHICULE VALUES (, , 'CAR') ; INSERT INTO T_VEHICULE VALUES (, , 'TWO WHEELES'); INSERT INTO T_VEHICULE VALUES (, , 'TRUCK') ; INSERT INTO T_VEHICULE VALUES (, , 'ROCKET'); INSERT INTO T_VEHICULE VALUES (, , 'PLANE') ; INSERT INTO T_VEHICULE VALUES (, , 'MOTORCYCLE'); INSERT INTO T_VEHICULE VALUES (, , 'BYCYCLE') ; WITH tree (data, id) AS (SELECT VHC_NAME, VHC_ID_FATHER FROM T_VEHICULE WHERE VHC_NAME = 'MOTORCYCLE' UNION ALL SELECT VHC_NAME, VHC_ID_FATHER FROM T_VEHICULE V INNER JOIN tree t ON t.id = V.VHC_ID) SELECT * FROM tree;"
4832,SQL,"CREATE SEQUENCE customers seq START WITH ; SELECT customeers seq curval from dual;"
4840,SQL,"create table T(id int, num int, val int); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); with recursive rec(i,str,num) AS ( select id, num, val from T where id = UNION ALL select id, num, val from T T inner join rec r on r.i = T.id ) select * from rec order by i ;"
4845,SQL,"create table T(id int, num int, val int); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); with recursive rec(i,str,n) AS ( select id, num, val from T where id = UNION ALL select id, num, val from T T inner join rec r on r.i = T.id ) select * from rec order by i ;"
4848,SQL,"create table T(id int, num int, val int); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); with recursive rec(i,str,n) AS ( select id, num, val from T where id = UNION ALL select id, num, val from T T inner join rec r on r.i = T.id ) select * from rec where id = order by i ;"
4860,SQL,"Create Table logserver ( test varchar(), test varchar());-- your code goes here"
4925,SQL,"create table T(id int, num int, val int); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); with recursive rec(i,str,n) AS ( select i, num as str , val as n from T UNION ALL select i, str, n||T.val- from rec inner join rec r on r.i = T.id ) select * from rec --where i= order by i ;"
4932,SQL,"create table T(id int, num int, val int); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); with recursive rec(i,str,n) AS ( select i, num as str , val as n from T UNION ALL select i, str, n||T.val- from rec inner join rec r on r.i = T.id ) select * from rec where i= order by i ;"
4943,SQL,"-- your code goes here create table T(id int, num int, val int); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); with recursive rec(i,str,n) AS ( select i, num as str , val as n from T UNION ALL select i, str, n||T.val- from rec inner join rec r on r.i = T.id where i = ) select * from rec --where i= order by i ;"
4953,SQL,"-- your code goes here create table T(id int, num int, val int); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); with recursive rec(i,str,n) AS ( select i, num as str , val as n from T UNION ALL select i, str, n||T.val- from rec where i = inner join rec r on r.i = T.id ) select * from rec --where i= order by i ;"
4976,SQL,"with watchlists as (select itemId::int from watchList where userId=) select id, name, photo from item where (userId=) and id = ANY('{watchlists}'::int[]);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
5106,SQL,"CREATE TABLE S ( `values` INT NOT NULL AUTO_INCREMENT PRIMARY KEY);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
5115,SQL,"CREATE TABLE S (`values`);#ИМЯ?;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
5198,SQL,"-- your code goes here declare @EmpName varchar() = '' --е°‡еѕћиі‡ж–™иЎЁж‰ѕе‡єд№‹иі‡ж–™зµ¦еЌЂеџџи®Љж•ё select @EmpName = @EmpName + '[' + е§“еђЌ + ']' from е“Ўе·Ґ --з”ЁSELECT ијёе‡є select @EmpName AS ж‰Ђжњ‰е“Ўе·Ґе§“еђЌ GO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
5235,SQL,"create table T(id int, num int, val int); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); with recursive rec(i,str,n) AS ( select id, num , val as str from T UNION ALL select id, str, cast(val||','||str as varchar()) from T T inner join (SELECT count() OVER(PARTITION BY rec ORDER BY i)[i],str,n FROM T) [T] on rec.i = T.id- order by id --where i = ) select * from rec --where i= order by i ;"
5672,SQL,"create table test (id int, name varchar()); go insert test values (,'aaa'); insert test values (,'bbb'); insert test values (,'ccc'); insert test values (,'ddd'); insert test values (,'eee'); with t as (select id, name row_number()over(partition by id order by id) rn from test), tr(id, name, lev) as (select t.id, cast(t.name as varchar), from t --where t.rn = union all select t.id, cast(tr.name+','+t.name as varchar), lev + from t join tr on (t.id = tr.id and t.rn = tr.lev) ) select id, max(name) names from tr group by id;"
5686,SQL,"create table test (id int, name varchar()); insert test values (,'aaa'); insert test values (,'bbb'); insert test values (,'ccc'); insert test values (,'ddd'); insert test values (,'eee'); with t as (select id, name row_number()over(partition by id order by id) rn from test), tr(id, name, lev) as (select t.id, cast(t.name as varchar), from t where t.rn = union all select t.id, cast(tr.name+','+t.name as varchar), lev + from t join tr on (t.id = tr.id and t.rn = tr.lev) ) select id, max(name) names from tr group by id;"
5702,SQL,"create table test (id int, name varchar()); insert into test values (,'aaa'); insert into test values (,'bbb'); insert into test values (,'ccc'); insert into test values (,'ddd'); insert into test values (,'eee'); with t as (select id, name row_number()over(partition by id order by id) rn from test), tr(id, name, lev) as (select t.id, cast(t.name as varchar), from t where t.rn = union all select t.id, cast(tr.name+','+t.name as varchar), lev + from t join tr on (t.id = tr.id and t.rn = tr.lev) ) select id, max(name) names from tr group by id;"
5759,SQL,"create table T(id int, num int, val int); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); insert into T values(, , ); with recursive rec(i,n,str) AS ( select id ,num as n, val as str from (select ROW_NUMBER() OVER(PARTITION BY id ORDER BY n)[n],id,str FROM T) T where n = UNION ALL select i,n+, cast(val||','||str as varchar()) from rec --where T.id- = rec.i join (SELECT ROW_NUMBER() OVER(PARTITION BY id ORDER BY n)[n],id,str FROM T) T on (rec.i=T.id and rec.n = T.num-) --order by id --where i = ) select i, str from rec where i= order by i ;"
6070,SQL,"CREATE TABLE recipes ( recipe_id INT NOT NULL, recipe_name VARCHAR() NOT NULL, PRIMARY KEY (recipe_id), UNIQUE (recipe_name) ); INSERT INTO recipes (recipe_id, recipe_name) VALUES (,Tacos), (,Tomato Soup), (,Grilled Cheese);-- your code goes here;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
6118,SQL,"-- your code goes here CREATE TABLE CosineTable ( Angle INT NOT NULL, CosineValue DECIMAL(,) NOT NULL, PRIMARY KEY (Angle) ); INSERT INTO CosineTable (Angle, CosineValue) VALUES (,), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,); SELECT * FROM CosineTable;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
6196,SQL,"CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); INSERT INTO Salaries (CheckNum, Amount) VALUES (, ), (, ), (, ), (, ), (, ), (, .), (, ); Select Amount, Count(CheckNum) as CntMax From Salaries Group By Amount Having CntMax = (Select Max(CntMax) From (Select Amount, Count(CheckNum) as CntMax From Salaries Group By Amount) as CountTable);"
6212,SQL,"CREATE TABLE CosineTable ( Angle INT NOT NULL, CosineValue DECIMAL(,) NOT NULL, PRIMARY KEY (Angle) ); INSERT INTO CosineTable (Angle, CosineValue) VALUES (,), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,); SELECT * FROM CosineTable;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
6220,SQL,"-- your code goes here CREATE TABLE CosineTable ( Angle INT NOT NULL, CosineValue DECIMAL(,) NOT NULL, PRIMARY KEY (Angle) ); INSERT INTO CosineTable (Angle, CosineValue) VALUES (,), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,); SELECT SUM(values) FROM ( SELECT CosineValue * ( - %) / FROM CosineTable WHERE Angle = - % UNION ALL SELECT CosineValue * (%) / FROM CosineTable WHERE Angle = + - % );"
6343,SQL,"-- your code goes here CREATE TABLE CosineTable ( Angle INT NOT NULL, CosVal DECIMAL(,) NOT NULL, PRIMARY KEY (Angle) ); INSERT INTO CosineTable (Angle, CosVal) VALUES (,), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,); SELECT ( fa.CosVal + (fb.CosVal - fa.CosVal) * ( - fa.Angle) / (fb.Angle - fa.Angle)) as lerp from (SELECT * from CosineTable WHERE Angle = (SELECT MAX(Angle) from CosineTable WHERE Angle < )) as fa, (SELECT * from CosineTable WHERE Angle = (SELECT MIN(Angle) from CosineTable WHERE Angle > )) as fb ;"
6458,SQL,"CREATE TABLE IF NOT EXISTS quotes_en( quoteID int() NOT NULL AUTO_INCREMENT PRIMARY KEY, quote TEXT NOT NULL, author varchar() NOT NULL DEFAULT 'Anonymous', quoteImage varchar() DEFAULT NULL, created_at DATETIME DEFAULT CURRENT_TIMESTAMP ) ENGINE=InnoDB AUTO_INCREMENT= DEFAULT CHARSET=utf; INSERT INTO quotes_en (quote,author) VALUES ('MY QUOTE', 'Anonymous');"
6693,SQL,"CREATE TABLE Salaries ( CheckNum INTEGER, Amount REAL NOT NULL, PRIMARY KEY(CheckNum) ); INSERT into Salaries VALUES (,), (,), (,), (,.), (,), (,), (,), (,); SELECT Amount, amt_count FROM(SELECT Amount, COUNT(Amount) as amt_count FROM Salaries GROUP BY Amount ORDER BY amt_count DESC) WHERE amt_count = ( SELECT MAX(amt_count) FROM (SELECT Amount, COUNT(Amount) as amt_count FROM Salaries GROUP BY Amount ORDER BY amt_count DESC));"
6712,SQL,"CREATE TABLE Salaries ( CheckNum INTEGER, Amount REAL NOT NULL, PRIMARY KEY(CheckNum) ); INSERT into Salaries VALUES (,), (,), (,), (,.), (,), (,), (,), (,); SELECT Amount, amt_count FROM(SELECT Amount, COUNT(Amount) as amt_count FROM Salaries GROUP BY Amount ORDER BY amt_count DESC) WHERE amt_count = ( SELECT MAX(amt_count) FROM (SELECT Amount, COUNT(Amount) as amt_count FROM Salaries GROUP BY Amount ORDER BY amt_count DESC));"
6727,SQL,"-- your code goes here -- your code goes here CREATE TABLE CosineTable ( Angle INT NOT NULL, CosineValue DECIMAL(,) NOT NULL, PRIMARY KEY (Angle) ); INSERT INTO CosineTable (Angle, CosineValue) VALUES (,), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,); SELECT ( (SELECT SUM(CosineValue * ( - %) / ) FROM CosineTable WHERE Angle = - %) + (SELECT SUM(CosineValue * (%) / ) FROM CosineTable WHERE Angle = + - %) )AS LerpResult;"
6787,SQL,"-- your code goes here CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); INSERT INTO Salaries (CheckNum, Amount) VALUES (,), (,), (,), (,), (,), (,), (,), (,); SELECT s.Amount, s.AmountOccurrence FROM( SELECT Amount, COUNT(Amount) AS AmountOccurrence, RANK() OVER (ORDER BY AmountOccurrence DESC) AS Rank FROM Salaries GROUP BY Amount ) s WHERE s.Rank = ;"
6795,SQL,"-- your code goes here CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); INSERT INTO Salaries (CheckNum, Amount) VALUES (,), (,), (,), (,), (,), (,), (,), (,); SELECT s.Amount, s.AmountOccurrence FROM( SELECT Amount, COUNT(Amount) AS AmountOccurrence, RANK() OVER (ORDER BY AmountOccurrence DESC) AS Rank FROM Salaries GROUP BY Amount ) s;"
6796,SQL,"-- your code goes here CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); INSERT INTO Salaries (CheckNum, Amount) VALUES (,), (,), (,), (,), (,), (,), (,), (,); SELECT s.Amount, s.AmountOccurrence FROM( SELECT Amount, COUNT(Amount) AS AmountOccurrence FROM Salaries GROUP BY Amount ) s;"
6991,SQL,"create table Scores(Team, Day varchar(), Opponent varchar(), Runs integer); insert into Scores values('Dragons', 'Sunday', 'Swallows', ); insert into Scores values('Tigers', 'Sunday', 'Bay Stars', ); insert into Scores values('Carp', 'Sunday', 'Giants', ); insert into Scores values('Swallows', 'Sunday', 'Dragons', ); insert into Scores values('Bay Stars', 'Sunday', 'Tigers', ); insert into Scores values('Giants', 'Sunday', 'Carp', ); insert into Scores values('Dragons', 'Monday', 'Carp', ); insert into Scores values('Tigers', 'Monday', 'Bay Stars', ); insert into Scores values('Carp', 'Monday', 'Dragons', ); insert into Scores values('Swallows', 'Monday', 'Giants', ); insert into Scores values('Bay Stars', 'Monday', 'Tigers', ); insert into Scores values('Giants', 'Monday', 'Swallows',/*!);"
7054,SQL,"CREATE SEQUENCE customers_seq START WITH ; SELECT customeers_seq.curval from dual;"
7218,SQL,"create table Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); INSERT INTO Salaries (CheckNum, Amount) VALUES (, ), (, ), (, ), (, ), (, ), (, .), (, ); -- SELECT `Amount` -- FROM `Salaries' -- GROUP BY `Amount` -- HAVING COUNT(`Amount`) = ( SELECT `Amount`,count(`Amount`) AS 'Amount_Frequency' FROM 'Salaries' GROUP BY 'Amount' ORDER BY `Amount_Frequency` DESC limit ; -- SELECT `Amount`, -- COUNT(`Amount`) AS `Amount_Frequency` -- FROM `Salaries` -- GROUP BY `Amount` -- ORDER BY `Amount_Frequency` DESC -- your code goes here-- your code goes here;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
7249,SQL,"create table Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); INSERT INTO Salaries (CheckNum, Amount) VALUES (, ), (, ), (, ), (, ), (, ), (, .), (, ); -- SELECT `Amount` -- FROM `Salaries' -- GROUP BY `Amount` -- HAVING COUNT(`Amount`) = ( SELECT `Amount`,count(`Amount`) AS 'Amount_Frequency' FROM 'Salaries' GROUP BY 'Amount' ORDER BY `Amount_Frequency` DESC limit ; -- SELECT `Amount`, -- COUNT(`Amount`) AS `Amount_Frequency` -- FROM `Salaries` -- GROUP BY `Amount` -- ORDER BY `Amount_Frequency` DESC -- your code goes here-- your code goes here-- your code goes here;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
7270,SQL,"create table Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); INSERT INTO Salaries (CheckNum, Amount) VALUES (, ), (, ), (, ), (, ), (, ), (, .), (, ); SELECT `Amount`, COUNT(`Amount`) AS `Amount_Frequency` FROM `Salaries` GROUP BY `Amount` ORDER BY `Amount_Frequency` DESC LIMIT ; -- your code goes here-- your code goes here-- your code goes here;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
7284,SQL,"create table Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); INSERT INTO Salaries (CheckNum, Amount) VALUES (, ), (, ), (, ), (, ), (, ), (, .), (, ); SELECT `Amount`, COUNT(`Amount`) --AS `Amount_Frequency` FROM `Salaries` GROUP BY `Amount` ORDER BY COUNT(`Amount`) DESC LIMIT ; -- your code goes here-- your code goes here-- your code goes here-- your code goes here;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
7314,SQL,"create database test;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
7346,SQL,"-- your code goes here CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); INSERT INTO Salaries (CheckNum, Amount) VALUES (,), (,), (,), (,), (,), (,.), (,);"
7360,SQL,"-- your code goes here"
7384,SQL,"create table Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); INSERT INTO Salaries (CheckNum, Amount) VALUES (, ), (, ), (, ), (, ), (, ), (, .), (, ); --SELECT `Amount` -- FROM `Salaries' -- GROUP BY `Amount` -- HAVING COUNT(`Amount`) = ( SELECT COUNT(`Amount`) FROM `Salaries` GROUP BY `Amount` ORDER BY COUNT(`Amount`) DESC LIMIT ; SELECT `Amount`, COUNT(`Amount`) AS `Amount_Frequency` FROM `Salaries` GROUP BY `Amount`; WHERE (Amount_Frequency =); -- your code goes here-- your code goes here-- your code goes here-- your code goes here-- your code goes here-- your code goes here-- your code goes here;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
7410,SQL,"CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); INSERT INTO Salaries (CheckNum, Amount) VALUES (,), (,), (,), (,), (,), (,.), --(,) ; select Amount, COUNT(Amount) AS MOST_FREQUENT from Salaries GROUP BY Amount having count(Amount) =(select max(MOST_FREQUENT) from (select Amount,count(Amount) as MOST_FREQUENT from Salaries group by Amount));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
7420,SQL,"create table Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); INSERT INTO Salaries (CheckNum, Amount) VALUES (, ), (, ), (, ), (, ), (, ), (, .), (, ); --SELECT `Amount` -- FROM `Salaries' -- GROUP BY `Amount` -- HAVING COUNT(`Amount`) = ( SELECT COUNT(`Amount`) FROM `Salaries` GROUP BY `Amount` ORDER BY COUNT(`Amount`) DESC LIMIT ; SELECT `Amount`, COUNT(`Amount`) AS `Amount_Frequency` FROM `Salaries` GROUP BY `Amount`; --WHERE (Amount_Frequency =); -- your code goes here-- your code goes here-- your code goes here-- your code goes here-- your code goes here-- your code goes here-- your code goes here-- your code goes here;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
7468,SQL,"CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); INSERT INTO Salaries (CheckNum, Amount) VALUES (,), (,), (,), (,), (,), (,.), (,); select Amount, COUNT(Amount) AS MOST_FREQUENT from Salaries GROUP BY Amount having count(Amount) =(select max(MOST_FREQUENT) from (select count(Amount) AS MOST_FREQUENT from Salaries group by Amount) Salaries);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
7474,SQL,"CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); INSERT INTO Salaries (CheckNum, Amount) VALUES (,), (,), (,), (,), (,), (,.), (,); select Amount, COUNT(Amount) AS MOST_FREQUENT from Salaries GROUP BY Amount having count(Amount) =(select max(MOST_FREQUENT) from (select count(Amount) AS MOST_FREQUENT from Salaries group by Amount) Salaries);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
7490,SQL,"CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); INSERT INTO Salaries (CheckNum, Amount) VALUES (,), (,), (,), (,), (,), (,.), (,); select Amount, COUNT(Amount) AS MOST_FREQUENT from Salaries GROUP BY Amount having Amount, COUNT(Amount) =(select max(MOST_FREQUENT) from (select count(Amount) AS MOST_FREQUENT from Salaries group by Amount) Salaries);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
7505,SQL,"CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); INSERT INTO Salaries (CheckNum, Amount) VALUES (,), (,), (,), (,), (,), (,.), (,); select Amount, COUNT(Amount) AS MOST_FREQUENT from Salaries GROUP BY Amount having Amount, COUNT(Amount) =(select max(MOST_FREQUENT) from (select Amount, count(Amount) AS MOST_FREQUENT from Salaries group by Amount) Salaries);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
7538,SQL,"-- your code goes here create table tble(str varchar()); insert into tble values ('Hello world!'),('SQL is fun!!'); select * from tble;"
7615,SQL,"CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); INSERT INTO Salaries (CheckNum, Amount) VALUES (,), (,), (,), (,), (,), (,.), (,); SELECT Amount, MOST_FREQUENT FROM(SELECT Amount, COUNT(Amount) MOST_FREQUENT FROM TABLENAME GROUP BY Amount ORDER BY COUNT(Amount) DESC) WHERE ROWNUM =;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
7621,SQL,"CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); INSERT INTO Salaries (CheckNum, Amount) VALUES (,), (,), (,), (,), (,), (,.), (,); SELECT Amount, COUNT(*) AS MOST_FREQUENT FROM Salaries GROUP BY Amount HAVING COUNT(*) = (SELECT MAX(MOST_FREQUENT) FROM (SELECT Amount, COUNT(*) AS MOST_FREQUENT FROM Salaries GROUP BY Amount) Salaries) SELECT Amount, MOST_FREQUENT FROM(SELECT Amount, COUNT(Amount) MOST_FREQUENT FROM TABLENAME GROUP BY Amount ORDER BY COUNT(Amount) DESC) WHERE ROWNUM = '1'            ;                             DROP Salaries;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
7632,SQL,"CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); INSERT INTO Salasries (CheckNum, Amount) VALUES (,), (,), (,), (,), (,), (,.), (,); SELECT Amount, MOST_FREQUENT FROM(SELECT Amount, COUNT(Amount) MOST_FREQUENT FROM Salasries GROUP BY Amount ORDER BY COUNT(Amount) DESC) WHERE ROWNUM =;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
7641,SQL,"CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); INSERT INTO Salaries (CheckNum, Amount) VALUES (,), (,), (,), (,), (,), (,.), (,); SELECT Amount, COUNT(*) AS MOST_FREQUENT FROM Salaries GROUP BY Amount HAVING COUNT(*) = (SELECT MAX(MOST_FREQUENT) FROM (SELECT Amount, COUNT(*) AS MOST_FREQUENT FROM Salaries GROUP BY Amount) Salaries);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
7650,SQL,"CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); INSERT INTO Salaries (CheckNum, Amount) VALUES (,), (,), (,), (,), (,), (,.), (,); SELECT Amount, MOST_FREQUENT FROM(SELECT Amount, COUNT(Amount) MOST_FREQUENT FROM Salaries GROUP BY Amount ORDER BY COUNT(Amount) DESC) WHERE ROWNUM =;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
7657,SQL,"CREATE TABLE Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); INSERT INTO Salaries (CheckNum, Amount) VALUES (,), (,), (,), (,), (,), (,.), (,); SELECT Amount, COUNT(Amount) AS MOST_FREQUENT FROM(SELECT Amount, MOST_FREQUENT FROM Salaries GROUP BY Amount ORDER BY COUNT(Amount) DESC) WHERE ROWNUM =;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
7709,SQL,"create TABLE Employee ( emp_id varchar() NOT NULL PRIMARY KEY, role varchar(), emp_name varchar(), team_id varchar(), team_name varchar() ); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Manager','Tyrion Jon','C','Expansion'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Sales Rep','Stannis Jon','C','Expansion'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Asst Manager','Melissa Andrea','C','Expansion'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Executive','Rachel Gan','C','Expansion'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Asst Manager','Arya Sansa','C','Expansion'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Executive','John Sansa','C','Expansion'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Sales Rep','Joe Trek','C','CoreC'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Manager','Ross Gan','C','CoreA'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Asst Manager','David Crane','C','CoreC'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Executive','Mike Trek','C','CoreB'); select e.emp_id,e.team_id from employee e,(select team_id,count(emp_id) as Team_Strength from employee group by team_id as tab where e.team_id in tab.team_id and tab.Team_strength>= order by e.team_id; -- your code goes here;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
7754,SQL,"create TABLE Employee ( emp_id varchar() NOT NULL PRIMARY KEY, role varchar(), emp_name varchar(), team_id varchar(), team_name varchar() ); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Manager','Tyrion Jon','C','Expansion'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Sales Rep','Stannis Jon','C','Expansion'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Asst Manager','Melissa Andrea','C','Expansion'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Executive','Rachel Gan','C','Expansion'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Asst Manager','Arya Sansa','C','Expansion'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Executive','John Sansa','C','Expansion'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Sales Rep','Joe Trek','C','CoreC'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Manager','Ross Gan','C','CoreA'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Asst Manager','David Crane','C','CoreC'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Executive','Mike Trek','C','CoreB'); select team_id,emp_id from Employee where team_id in (select e.team_id,count(emp_id) as CN from Employee e group by e.team_id having CN>= order by team_id); -- your code goes here;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
7764,SQL,"create TABLE Employee ( emp_id varchar() NOT NULL PRIMARY KEY, role varchar(), emp_name varchar(), team_id varchar(), team_name varchar() ); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Manager','Tyrion Jon','C','Expansion'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Sales Rep','Stannis Jon','C','Expansion');                              SELECT SINGLE login FROM Members WHERE rights = 'admin'; ; INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Asst Manager','Melissa Andrea','C','Expansion'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Executive','Rachel Gan','C','Expansion'); --INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Asst Manager','Arya Sansa','C','Expansion'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Executive','John Sansa','C','Expansion'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Sales Rep','Joe Trek','C','CoreC'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Manager','Ross Gan','C','CoreA'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Asst Manager','David Crane','C','CoreC'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Executive','Mike Trek','C','CoreB'); select team_id,emp_id from Employee where team_id in (select e.team_id,count(emp_id) as CN from Employee e group by e.team_id having CN>=) order by team_id; -- your code goes here -- your code goes here;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
7798,SQL,"create TABLE Employee ( emp_id varchar() NOT NULL PRIMARY KEY, role varchar(), emp_name varchar(), team_id varchar(), team_name varchar() ); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Manager','Tyrion Jon','C','Expansion'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Sales Rep','Stannis Jon','C','Expansion'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Asst Manager','Melissa Andrea','C','Expansion'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Executive','Rachel Gan','C','Expansion'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Asst Manager','Arya Sansa','C','Expansion'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Executive','John Sansa','C','Expansion'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Sales Rep','Joe Trek','C','CoreC'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Manager','Ross Gan','C','CoreA'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Asst Manager','David Crane','C','CoreC'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Executive','Mike Trek','C','CoreB'); select team_id,emp_id from Employee where team_id in (select e.team_id,count(emp_id) as CN from Employee e group by e.team_id having CN>=) order by team_id; -- your code goes here -- your code goes here -- your code goes here;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
7813,SQL,"create TABLE Employee ( emp_id varchar() NOT NULL PRIMARY KEY, role varchar(), emp_name varchar(), team_id varchar(), team_name varchar() ); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Manager','Tyrion Jon','C','Expansion'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Sales Rep','Stannis Jon','C','Expansion'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Asst Manager','Melissa Andrea','C','Expansion'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Executive','Rachel Gan','C','Expansion'); INSERT INTO Employee(emp_id,/*role*/,emp_name,team_id,/*!577 team_name*/) VALUES ('PP','Asst Manager','Arya Sansa','C','Expansion'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Executive','John Sansa','C','Expansion'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Sales Rep','Joe Trek','C','CoreC'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Manager','Ross Gan','C','CoreA'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Asst Manager','David Crane','C','CoreC'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Executive','Mike Trek','C','CoreB'); select team_id,emp_id from Employee where team_id in (select e.team_id,count(e.emp_id) as CN from Employee e group by e.team_id having CN>=) order by team_id; -- your code goes here;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
7824,SQL,"create TABLE Employee ( emp_id varchar() NOT NULL PRIMARY KEY, role varchar(), emp_name varchar(), team_id varchar(), team_name varchar() ); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Manager','Tyrion Jon','C','Expansion'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Sales Rep','Stannis Jon','C','Expansion'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Asst Manager','Melissa Andrea','C','Expansion'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Executive','Rachel Gan','C','Expansion'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Asst Manager','Arya Sansa','C','Expansion'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Executive','John Sansa','C','Expansion'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Sales Rep','Joe Trek','C','CoreC'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Manager','Ross Gan','C','CoreA'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Asst Manager','David Crane','C','CoreC'); INSERT INTO Employee(emp_id,role,emp_name,team_id,team_name) VALUES ('PP','Executive','Mike Trek','C','CoreB'); select ALL(emp_id),team_name,count(emp_id) from employee group by team_name having count(emp_id)>; -- your code goes here;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
7882,SQL,"CREATE TABLE CUSTOMER(customerid,customername); INSERT INTO CUSTOMER(customerid,customername) VALUES(,'alpha'); INSERT INTO CUSTOMER(custonerid,customername) VALUES(,'beta'); SAVEPOINT s; INSERT INTO CUSTOMER(custonerid,/*customername*/) VALUES(,'gama'); SAVEPOINT s; INSERT INTO CUSTOMER(custonerid,customername) VALUES(,'tera'); SAVEPOINT s; INSERT INTO CUSTOMER(custonerid,customername) VALUES(,'omega'); ROLLBACK TO s; SELECT customername FROM CUSTOMER;"
7883,SQL,"create table Salaries( CheckNum INTEGER PRIMARY KEY, Amount DECIMAL(,) NOT NULL ); ----- Creating a temp table ----- create table TEMPTABLE ( Amount DECIMAL(,) NOT NULL , Frequency INTEGER ); INSERT INTO Salaries (CheckNum, Amount) VALUES (, ), (, ), (, ), (, ), (, ), (, ), (, ), (, .), (, ); INSERT INTO TEMPTABLE SELECT `Amount`, COUNT(`Amount`) AS `Amount_Frequency` FROM `Salaries` GROUP BY `Amount`; SELECT * FROM TEMPTABLE WHERE Frequency = (SELECT COUNT(`Amount`) FROM `Salaries` GROUP BY `Amount` ORDER BY COUNT(`Amount`) DESC LIMIT ) ;"
7886,SQL,"CREATE TABLE CUSTOMER(customerid number, customername varchar()); INSERT INTO CUSTOMER (customerid,customername) VALUES(,'alpha') ; INSERT INTO CUSTOMER (customerid,customername) VALUES(,'beta'); SAVEPOINT s; INSERT INTO CUSTOMER (customerid,customername) VALUES(,'gamma'); SAVEPOINT s; INSERT INTO CUSTOMER (customerid,customername) VALUES(,'tera'); SAVEPOINT s; INSERT INTO CUSTOMER (customerid,customername) VALUES(,'omega'); ROLLBACK TO s; SELECT customername FROM CUSTOMER;"
7888,SQL,"SELECT TO_CHAR(,'.') FROM DUAL;"
7954,SQL,"CREATE TABLE Persons ( PersonID int, LastName varchar(), FirstName varchar(), Address varchar(), City varchar() );"
7988,SQL,"SELECT TO_CHAR(,'.') FROM DUAL;"
8012,SQL,"SELECT TO_CHAR('','.') FROM DUAL;"
9034,SQL,"-- your code goes here CREATE TABLE Persons ( ID int, LastName varchar(), FirstName varchar(), Address varchar(), City varchar() );"
9199,SQL,"create table Sample(value int, value int); insert into Sample values(,); insert into Sample values(,); insert into Sample values(,); insert into Sample values(,); insert into Sample values(,); insert into Sample values(,); select TOP() from Sample;"
9317,SQL,"CREATE TABLE ValTest ( Customer TEXT, ESN text, Invoice text, Total Integer ); INSERT INTO Valtest VALUES ('SB leasing', '', '', ); Select * FROM Valtest WHERE 'A' = 'B'; -- your code goes here;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
9324,SQL,"create table Sample(value int, value int); insert into Sample values(,); insert into Sample values(,); insert into Sample values(,); /*!5717 D/**/ROP Sample */; insert into Sample values(,); insert into Sample values(,); insert into Sample values(,); select top value from Sample;"
10184,SQL,"-- your code goes hereCREATE TABLE ETL_AUDIT ( AUDIT_ID NUMBER(,) PRIMARY KEY NULL, PROCESS_DT TIMESTAMP () DEFAULT CURRENT_TIMESTAMP, BATCH_RUN_ID NUMBER(,) NOT NULL, SCHEMA_NAME VARCHAR() NOT NULL, TABLE_NAME VARCHAR() NOT NULL, EXPECTED_CNT NUMBER(,) NOT NULL, ACTUAL_CNT NUMBER(,), APPL_PROC_ID NUMBER(,) NOT NULL, AUDIT_RESULT NUMBER(,) );"
10397,SQL,"create table sam(sau varchar());"
10594,SQL,"create table emp (id number,name varchar(),dept varchar()); insert into emp values(,'anu',); insert into emp values(,'vinu',); insert into emp values(,'RASa',); insert into emp values(,'AAdil',); insert into emp values(,'aadersh',); insert into emp values(,'Aanand',); select name from emp where name like '%aa%';"
10845,SQL,"CREATE TABLE employees_workshift ( `id` int not null auto_increment, `worker_id` int not null, `away_at` timestamp, `returned_at` timestamp, `is_awhile` tinyint, PRIMARY KEY (`id`) ); INSERT INTO employees_workshift (`worker_id`, `away_at`, `returned_at`, `is_awhile`) VALUES (, null, NOW() - INTERVAL HOUR, ), (, NOW() - INTERVAL MINUTE, null, ), (, null, NOW() - INTERVAL MINUTE, ), (, NOW(), null, ) ; select * from employees_workshift group by worker_id;"
10863,SQL,"Create table tab ( Id int; name varchar(); )"
10913,SQL,"create database abc-- your code goes here"
11053,SQL,"declarefd var varchar(); begin var := 'variable'; end;"
11922,SQL,"--find when more than one signal was given to a transponder in a single lane in a minute window SELECT (SELECT lane_name FROM stationroadside.lane_name WHERE lane_name.ln_number = data.ln_number) || ' (' || ln_number ||')' AS lane, transaction_id, transponder_number, transaction_date, num_transactions FROM ( SELECT transaction_id, transponder_number, transaction_date, ln_number, COUNT() OVER ( PARTITION BY ln_number, transponder_number ORDER BY transaction_date ASC RANGE BETWEEN INTERVAL '' MINUTE FOLLOWING AND INTERVAL '' MINUTE FOLLOWING ) num_transactions, COUNT() OVER ( PARTITION BY ln_number, transponder_number ORDER BY transaction_date DESC RANGE BETWEEN INTERVAL '' MINUTE FOLLOWING AND INTERVAL '' MINUTE FOLLOWING ) num_transactions_adv FROM avi_transactions WHERE transaction_date >= TRUNC(SYSDATE,'DD') - ) data WHERE num_transactions_adv= AND num_transactions> ORDER BY ln_number ASC, transaction_id DESC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
11954,SQL,"create table customer(zipCode integer, age integer, ID integer); insert into customer values(, , ); insert into customer values(, , ); insert into customer values(, , ); insert into customer values(, , ); insert into customer values(, , ); insert into customer values(, , ); insert into customer values(, , ); insert into customer values(, , ); insert into customer values(, , ); select zipCode, age, ID, sum(ID) from customer group by zipCode, age, ID;"
12185,SQL,"declare v_num number():='&Digite_o_primeiro_numero'; v_num number():='&Digite_o_segundo_numero'; v_soma number(); begin dbms_output.put.line('chora'); end;"
12308,SQL,"CREATE SEQUENCE customer_seq START WITH ; SELECT customer_seq curval from dual;"
12361,SQL,"CREATE TABLE CosineTable( Angle INTEGER PRIMARY KEY, CosValue DECIMAL(,) NOT NULL ); INSERT INTO CosineTable VALUES (,), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,); SELECT * from (SELECT Angle, CosValue FROM ( SELECT Angle,CosValue FROM CosineTable WHERE Angle<= ) WHERE Angle=(SELECT Max(Angle) FROM (SELECT Angle FROM CosineTable WHERE Angle<=))) UNION SELECT * from (SELECT Angle, CosValue FROM ( SELECT Angle,CosValue FROM CosineTable WHERE Angle>= ) WHERE Angle=(SELECT MIN(Angle) FROM (SELECT Angle FROM CosineTable WHERE Angle>=))) ;"
12367,SQL,"CREATE TABLE CosineTable( Angle INTEGER PRIMARY KEY, CosValue DECIMAL(,) NOT NULL ); INSERT INTO CosineTable VALUES (,), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,.), (,); SELECT * from (SELECT Angle, CosValue FROM ( SELECT Angle,CosValue FROM CosineTable WHERE Angle<= ) WHERE Angle=(SELECT Max(Angle) FROM (SELECT Angle FROM CosineTable WHERE Angle<=))) UNION SELECT * from (SELECT Angle, CosValue FROM ( SELECT Angle,CosValue FROM CosineTable WHERE Angle>= ) WHERE Angle=(SELECT MIN(Angle) FROM (SELECT Angle FROM CosineTable WHERE Angle>=)));"
12426,SQL,"declare @var numeric(), @var numeric(), @var numeric(), @var numeric(); set @var=; set @var=; set @var=@var+@var-@var set @var=@var-@var select @var select @var;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
12456,SQL,"CREATE TABLE student(student_id int PRIMARY KEY, name text); INSERT INTO student VALUES(, 'Dan'); INSERT INTO student VALUES(, 'John'); INSERT INTO student VALUES(, 'Ben'); CREATE TABLE books(isbn int PRIMARY KEY, title text, author text, publisher text); INSERT INTO books VALUES(, 'bookA', 'Avi Silberschatz', 'pubA'); INSERT INTO books VALUES(, 'bookB', 'Avi Silberschatz', 'pubB'); INSERT INTO books VALUES(, 'bookC', 'Avi Silberschatz', 'pubB'); INSERT INTO books VALUES(, 'bookD', 'Avi Silberschatz', 'pubB'); INSERT INTO books VALUES(, 'bookE', 'John X Sade', 'pubB'); INSERT INTO books VALUES(, 'bookF', 'John X Sade', 'pubA'); INSERT INTO books VALUES(, 'bookG', 'John X Sade', 'pubC'); INSERT INTO books VALUES(, 'bookH', 'John X Sade', 'pubD'); INSERT INTO books VALUES(, 'bookZ', 'Some Guy', 'pubC'); INSERT INTO books VALUES(, 'bookX', 'Some Guy', 'pubD'); CREATE TABLE loan(student_id int, isbn int, issue_date, due_date); ALTER TABLE loan PRIMARY KEY (student_id, isbn); INSERT INTO loan VALUES(, , '', '' ); INSERT INTO loan VALUES(, , '', '' ); INSERT INTO loan VALUES(, , '', '' ); INSERT INTO loan VALUES(, , '', '' ); INSERT INTO loan VALUES(, , '', '' ); INSERT INTO loan VALUES(, , '', '' ); INSERT INTO loan VALUES(, , '', '' ); INSERT INTO loan VALUES(, , '', '' ); INSERT INTO loan VALUES(, , '', '' ); INSERT INTO loan VALUES(, , '', '' ); INSERT INTO loan VALUES(, , '', '' ); INSERT INTO loan VALUES(, , '', '' ); INSERT INTO loan VALUES(, , '', '' ); INSERT INTO loan VALUES(, , '', '' ); INSERT INTO loan VALUES(, , '', '' ); SELECT isbn FROM books WHERE 'Sade' = RIGHT(author, )) DROP TABLE student; DROP TABLE books; DROP TABLE loan;-- your code goes here;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
12531,SQL,"create table ARTICULLOS( CodigoArticulo int not null, DescripcionArticulo char, PrecioArticulo float, ExistenciaArticulo int, constraint PK_Articulos primary key (CodigoArticulo) );"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
